#!/usr/bin/env python3
import asyncio
import logging
import logging.config
import os

from symphony.bdk.core.config.loader import BdkConfigLoader
from symphony.bdk.core.service.datafeed.real_time_event_listener import RealTimeEventListener
from symphony.bdk.core.symphony_bdk import SymphonyBdk
from symphony.bdk.gen.agent_model.v4_initiator import V4Initiator
from symphony.bdk.gen.agent_model.v4_message_sent import V4MessageSent

current_dir = os.path.dirname(os.path.abspath(__file__))


async def run():
  config = BdkConfigLoader.load_from_file(os.path.join(current_dir, '..', 'resources/config.yaml'))

  async with SymphonyBdk(config) as bdk:
    datafeed_loop = bdk.datafeed()
    datafeed_loop.subscribe(RealTimeEventListenerImpl(bdk))
    logging.info("Start datafeed...")
    await datafeed_loop.start()


class RealTimeEventListenerImpl(RealTimeEventListener):

  def __init__(self, bdk: SymphonyBdk):
    self._bdk = bdk

  async def on_message_sent(self, initiator: V4Initiator, event: V4MessageSent):
    stream_id = event.message.stream.stream_id
    display_name = initiator.user.display_name
    await self._bdk.messages().send_message(
      stream_id,
      f"<messageML>Hello {display_name}, hope you are doing well!</messageML>"
    )


logging.config.fileConfig(os.path.join(current_dir, '..', 'logging.conf'),
                          disable_existing_loggers=False)

try:
  logging.info("Running bot application...")
  if os.name == "nt":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
  asyncio.run(run())
except KeyboardInterrupt:
  logging.info("Ending bot application")
