#!/usr/bin/env python3
import asyncio
import logging.config
import os

from symphony.bdk.core.activity.command import CommandContext
from symphony.bdk.core.config.loader import BdkConfigLoader
from symphony.bdk.core.service.datafeed.real_time_event_listener import RealTimeEventListener
from symphony.bdk.core.symphony_bdk import SymphonyBdk
from symphony.bdk.gen.agent_model.v4_initiator import V4Initiator
from symphony.bdk.gen.agent_model.v4_message_sent import V4MessageSent

from python.activities import EchoCommandActivity, GreetUserJoinedActivity
from python.gif_activities import GifSlashCommand, GifFormReplyActivity

current_dir = os.path.dirname(os.path.abspath(__file__))


class RealTimeEventListenerImpl(RealTimeEventListener):

    def __init__(self, bdk: SymphonyBdk):
        self._bdk = bdk

    async def on_message_sent(self, initiator: V4Initiator, event: V4MessageSent):
        logging.debug("Message received from %s", initiator.user.display_name)


async def run():
    config = BdkConfigLoader.load_from_file(os.path.join(current_dir, '..', 'resources/config.yaml'))

    async with SymphonyBdk(config) as bdk:
        datafeed_loop = bdk.datafeed()
        datafeed_loop.subscribe(RealTimeEventListenerImpl(bdk))

        activities = bdk.activities()
        activities.register(EchoCommandActivity(bdk.messages()))
        activities.register(GreetUserJoinedActivity(bdk.messages(), bdk.users()))
        activities.register(GifSlashCommand(bdk.messages()))
        activities.register(GifFormReplyActivity(bdk.messages()))

        @activities.slash("/hello")
        async def hello(context: CommandContext):
            await bdk.messages().send_message(
                context.stream_id,
                f"<messageML>Hello {context.initiator.user.display_name}, hope you are doing well!</messageML>"
            )

        logging.info("Start datafeed...")
        await datafeed_loop.start()


logging.config.fileConfig(os.path.join(current_dir, '..', 'logging.conf'),
                          disable_existing_loggers=False)

try:
    logging.info("Running bot application...")
    asyncio.run(run())
except KeyboardInterrupt:
    logging.info("Ending bot application")
